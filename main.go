package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"sync"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DownloadTask
type DownloadTask struct {
	URL      string
	FileName string
	Size     int64
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DownloadResult
type DownloadResult struct {
	Task         DownloadTask
	WorkerID     int
	Success      bool
	Error        error
	Duration     time.Duration
	ActualSize   int64
	DownloadedAt time.Time
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Downloader
type Downloader struct {
	mu          sync.Mutex
	results     []DownloadResult
	client      *http.Client
	workers     int
	downloadDir string
}

// –º–µ—Ç–æ–¥ newDownloader –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫—ñ–≤
func NewDownloader(workers int) *Downloader {
	return &Downloader{
		client:      &http.Client{Timeout: 15 * time.Second},
		workers:     workers,
		results:     []DownloadResult{},
		downloadDir: "downloads",
	}
}

// –º–µ—Ç–æ–¥ worker –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏ –≤–æ—Ä–∫–µ—Ä—ñ–≤
func (d *Downloader) worker(workerID int, taskChan <-chan DownloadTask, resultChan chan<- DownloadResult, wg *sync.WaitGroup) {
	defer wg.Done()
	// —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å, —è–∫—ñ –Ω–∞—Ö–æ–¥—è—Ç—å—Å—è —É –∫–∞–Ω–∞–ª—ñ
	for task := range taskChan {
		time.Sleep(time.Second * 2)
		fmt.Printf("‚¨áÔ∏è Worker %d: %s \n", workerID+1, task.FileName)
		res := d.downloadFile(task, workerID)
		resultChan <- res
		if res.Success {
			fmt.Printf("‚úÖ [Worker %d] %s (%.1fKB, %.1fs)\n", workerID+1, task.FileName, float64(res.ActualSize/1024), res.Duration.Seconds())
		} else {
			fmt.Printf("‚ùå [Worker %d] %s (%v)\n", workerID+1, task.FileName, res.Error)
		}
	}
}

// –º–µ—Ç–æ–¥ downloadFile —è–∫–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª–∏ –∑ url-–∞–¥—Ä–µ—Å—ñ–≤
func (d *Downloader) downloadFile(task DownloadTask, workerID int) DownloadResult {
	// –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
	start := time.Now()

	// http –∑–∞–ø–∏—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
	resp, err := d.client.Get(task.URL)
	if err != nil {
		return DownloadResult{Task: task, WorkerID: workerID, Success: false, Error: err, Duration: time.Since(start)}
	}
	// –∑–∞–∫—Ä–∏—Ç—Ç—è —Ä–µ—Å–ø–æ–Ω—Å—É
	defer resp.Body.Close()

	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
	if resp.StatusCode != http.StatusOK {
		return DownloadResult{Task: task, WorkerID: workerID, Success: false, Error: fmt.Errorf("Bad status: %s", resp.Status), Duration: time.Since(start)}
	}

	// —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
	os.MkdirAll("downloads", 0755)
	// —Ñ–æ—Ä–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª–∞ —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
	outputPath := filepath.Join(d.downloadDir, task.FileName)
	file, err := os.Create(outputPath)
	if err != nil {
		return DownloadResult{Task: task, WorkerID: workerID, Success: false, Error: err, Duration: time.Since(start)}
	}
	defer file.Close()

	// –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç—ñ–ª–∞ http-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ñ–∞–π–ª
	writer, err := io.Copy(file, resp.Body)
	if err != nil {
		return DownloadResult{Task: task, WorkerID: workerID, Success: false, Error: err, Duration: time.Since(start)}
	}

	// —Ñ–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
	return DownloadResult{
		Task:         task,
		WorkerID:     workerID,
		Success:      true,
		Duration:     time.Since(start),
		ActualSize:   writer,
		DownloadedAt: time.Now(),
	}
}

// –º–µ—Ç–æ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É Downloader.results
func (d *Downloader) addResult(result DownloadResult) {
	d.mu.Lock()
	defer d.mu.Unlock()
	d.results = append(d.results, result)
}

// –º–µ—Ç–æ–¥ –ø—Ä–∏–π–º–∞—î —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å —ñ —Ä–æ—Å–ø—Ä—ñ–¥—ñ–ª—è—î –º—ñ–∂ –≤–æ—Ä–∫–µ—Ä–∞–º–∏
func (d *Downloader) DownloadFiles(tasks []DownloadTask) {
	// –≤—ñ–º—ñ—Ä—é—î –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
	start := time.Now()

	// –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–¥–∞–Ω—å –≤–æ—Ä–∫–µ—Ä–∞–º
	taskChan := make(chan DownloadTask)
	// –∫–∞–Ω–∞–ª –¥–ª—è –∑–±–æ—Ä—É —Ä–µ–∑—ñ–ª—å—Ç–∞—Ç—ñ–≤ –≤—ñ–¥ –≤–æ—Ä–∫–µ—Ä—ñ–≤
	resultChan := make(chan DownloadResult)

	fmt.Printf("üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å: %d | –í–æ—Ä–∫–µ—Ä—ñ–≤: %d\n\n", len(tasks), d.workers)
	var wg sync.WaitGroup
	// —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–æ—Ä–∫–µ—Ä—ñ–≤
	for i := 0; i < d.workers; i++ {
		wg.Add(1)
		go d.worker(i, taskChan, resultChan, &wg)
	}

	fmt.Printf("üöÄ%d Worker –∑–∞–ø—É—â–µ–Ω—ñ\n", d.workers)

	// –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å —É –∫–∞–Ω–∞–ª
	go func() {
		for _, task := range tasks {
			taskChan <- task
		}
		close(taskChan)
	}()

	// –≥–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è resultChan –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≤–æ—Ä–∫–µ—Ä—ñ–≤
	go func() {
		wg.Wait()
		close(resultChan)
	}()

	// –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	succesCount := 0
	errorCount := 0
	totalSize := int64(0)
	workerStats := make(map[int]int)

	// —á–∏—Ç–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑ –∫–∞–Ω–∞–ª—É
	for res := range resultChan {
		d.addResult(res) // –¥–æ–¥–∞—î–º–æ —Ä–µ–∑—ñ–ª—å—Ç–∞—Ç
		if res.Success {
			succesCount++
			totalSize += res.ActualSize
			workerStats[res.WorkerID]++ // —Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å–∫—ñ–ª—å–∫–∏ —Ñ–∞–π–ª—ñ–≤ –∑—Ä–æ–±–∏–≤ –≤–æ—Ä–∫–µ—Ä
		} else {
			errorCount++
		}
	}
	// –≤–∏–≤—ñ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	fmt.Println("\nüèÅ –í—Å—ñ –≤–æ—Ä–∫–µ—Ä–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–±–æ—Ç—É")
	fmt.Println("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: ")
	fmt.Printf("‚úÖ –£—Å–ø—ñ—à–Ω–æ: %d | ‚ùå –ü–æ–º–∏–ª–∫–∏: %d\n", succesCount, errorCount)
	fmt.Printf("üì¶ –†–æ–∑–º—ñ—Ä: %.1fKB | ‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å: %.1fKB/s\n", float64(totalSize)/1024, (float64(totalSize)/1024)/time.Since(start).Seconds())

	// –≤–∏–≤—ñ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É –≤–æ—Ä–∫–µ—Ä—É
	fmt.Print("üë∑ ")
	for w, f := range workerStats {
		fmt.Printf("Worker %d: %d —Ñ–∞–π–ª–∏ |", w+1, f)
	}
	fmt.Printf("\nüìÅ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤: %s/\n", d.downloadDir)
}

func main() {
	fmt.Println("üì• –ü–ê–†–ê–õ–ï–õ–¨–ù–ò–ô DOWNLOADER \n =========================")

	tasks := []DownloadTask{
		{"https://httpbin.org/json", "test_json.json", 1024},
		{"https://httpbin.org/xml", "test_xml.xml", 2048},
		{"https://jsonplaceholder.typicode.com/posts/1", "post_1.json", 1024},
		{"https://jsonplaceholder.typicode.com/users", "users.json", 8192},
		{"https://api.github.com/repos/golang/go", "golang_repo.json", 4096},
		{"https://httpbin.org/delay/2", "delayed_response.json", 1024},
	}
	d := NewDownloader(3)
	d.DownloadFiles(tasks)

}
